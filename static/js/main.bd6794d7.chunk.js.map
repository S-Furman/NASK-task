{"version":3,"sources":["components/ContactsTable/SingleRow/SingleRow.js","components/ContactsTable/ContactsTable.js","components/Input/Input.js","App.js","reportWebVitals.js","index.js"],"names":["SingleRow","props","useState","isChecked","setIsChecked","TableRow","value","TableCell","onClick","console","log","id","name","phone","padding","Checkbox","checked","ContactsTable","fetchedData","setFetchedData","useEffect","fetch","then","response","json","sort","compareNames","sorted","a","b","getSecondName","split","slice","join","secondNameA","secondNameB","TableContainer","component","Paper","Table","TableHead","TableBody","map","person","includes","searchValue","Input","TextField","margin","variant","label","onChange","event","inputValue","target","App","setInputValue","Box","Container","string","charAt","toUpperCase","toLowerCase","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sTAyBeA,EAtBG,SAACC,GACjB,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAOA,OACE,eAACC,EAAA,EAAD,CAAyBC,OAAO,EAAhC,UACE,cAACC,EAAA,EAAD,CAAWC,QAPY,WACzBJ,GAAcD,GACdM,QAAQC,IAAIT,EAAMU,KAKhB,SAAyCV,EAAMW,OAC/C,cAACL,EAAA,EAAD,UAAYN,EAAMY,QAClB,cAACN,EAAA,EAAD,CAAWO,QAAQ,WAAnB,SACE,cAACC,EAAA,EAAD,CACEP,QAAS,kBAAMJ,GAAcD,IAC7Ba,QAASb,QANAF,EAAMU,KCoEVM,EApEO,SAAChB,GACrB,MAAsCC,mBAAS,IAA/C,mBAAOgB,EAAP,KAAoBC,EAApB,KA2BA,OAzBAC,qBAAU,WAERC,MADY,8CAETC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GAAD,OAAUA,EAAKC,KAAKC,MACzBJ,MAAK,SAACK,GAAD,OAAYR,EAAeQ,MAEnC,IAAMD,EAAe,SAACE,EAAGC,GACvB,IAAMC,EAAgB,SAACF,GACrB,OAAOA,EAAEG,MAAM,KAAKC,OAAO,GAAGC,KAAK,MAG/BC,EAAcJ,EAAcF,EAAEhB,MAC9BuB,EAAcL,EAAcD,EAAEjB,MAEpC,OAAIsB,EAAcC,GACR,EAEND,EAAcC,EACT,EAEF,KAER,IAGD,cAACC,EAAA,EAAD,CAAgBC,UAAWC,IAA3B,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,eAACnC,EAAA,EAAD,WACE,cAACE,EAAA,EAAD,mBACA,cAACA,EAAA,EAAD,yBAGJ,cAACkC,EAAA,EAAD,UACGvB,EAAYwB,KAAI,SAACC,GAChB,OAAIA,EAAO/B,KAAKgC,SAAS3C,EAAM4C,cACzB5C,EAAM4C,YAEN,cAAC,EAAD,CAEElC,GAAIgC,EAAOhC,GACXC,KAAM+B,EAAO/B,KACbC,MAAO8B,EAAO9B,OAHT8B,EAAOhC,KAiBb,gB,SC3DJmC,EAXD,SAAC7C,GACb,OACE,cAAC8C,EAAA,EAAD,CACEC,OAAO,SACPC,QAAQ,WACRC,MAAM,iBACNC,SAAU,SAACC,GAAD,OAAWnD,EAAMoD,WAAWD,EAAME,OAAOhD,WCmB1CiD,MArBf,WACE,MAAoCrD,mBAAS,IAA7C,mBAAOmD,EAAP,KAAmBG,EAAnB,KAUA,OACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAAC,EAAD,CAAOL,WAXS,SAACA,GACrB,IAA4BM,EAI5BH,GAJ4BG,EAIKN,GAHjBO,OAAO,GAAGC,cAAgBF,EAAO3B,MAAM,GAAG8B,kBAUtD,cAAC,EAAD,CAAejB,YAAaQ,UCTrBU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB3C,MAAK,YAAkD,IAA/C4C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.bd6794d7.chunk.js","sourcesContent":["import { TableRow, TableCell, Checkbox } from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\n\r\nconst SingleRow = (props) => {\r\n  const [isChecked, setIsChecked] = useState(false);\r\n\r\n  const personClickHandler = () => {\r\n    setIsChecked(!isChecked);\r\n    console.log(props.id);\r\n  };\r\n\r\n  return (\r\n    <TableRow key={props.id} value={false}>\r\n      <TableCell onClick={personClickHandler}>{props.name}</TableCell>\r\n      <TableCell>{props.phone}</TableCell>\r\n      <TableCell padding=\"checkbox\">\r\n        <Checkbox\r\n          onClick={() => setIsChecked(!isChecked)}\r\n          checked={isChecked}\r\n        />\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n};\r\n\r\nexport default SingleRow;\r\n","import {\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableCell,\r\n  TableRow,\r\n  TableBody,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport { useEffect, useState } from \"react\";\r\nimport SingleRow from \"./SingleRow/SingleRow\";\r\n\r\nconst ContactsTable = (props) => {\r\n  const [fetchedData, setFetchedData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const url = \"https://jsonplaceholder.typicode.com/users\";\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then((json) => json.sort(compareNames))\r\n      .then((sorted) => setFetchedData(sorted));\r\n\r\n    const compareNames = (a, b) => {\r\n      const getSecondName = (a) => {\r\n        return a.split(\" \").slice(-1).join(\" \");\r\n      };\r\n\r\n      const secondNameA = getSecondName(a.name);\r\n      const secondNameB = getSecondName(b.name);\r\n\r\n      if (secondNameA < secondNameB) {\r\n        return -1;\r\n      }\r\n      if (secondNameA > secondNameB) {\r\n        return 1;\r\n      }\r\n      return 0;\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Name</TableCell>\r\n            <TableCell>Phone</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {fetchedData.map((person) => {\r\n            if (person.name.includes(props.searchValue)) {\r\n              if (props.searchValue) {\r\n                return (\r\n                  <SingleRow\r\n                    key={person.id}\r\n                    id={person.id}\r\n                    name={person.name}\r\n                    phone={person.phone}\r\n                  />\r\n                );\r\n              } else {\r\n                return (\r\n                  <SingleRow\r\n                    key={person.id}\r\n                    id={person.id}\r\n                    name={person.name}\r\n                    phone={person.phone}\r\n                  />\r\n                );\r\n              }\r\n            }\r\n            return null;\r\n          })}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default ContactsTable;\r\n","import { TextField } from \"@material-ui/core\";\r\n\r\nconst Input = (props) => {\r\n  return (\r\n    <TextField\r\n      margin=\"normal\"\r\n      variant=\"outlined\"\r\n      label=\"Search by Name\"\r\n      onChange={(event) => props.inputValue(event.target.value)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import \"./App.css\";\nimport { Box, Container } from \"@material-ui/core\";\nimport ContactsTable from \"./components/ContactsTable/ContactsTable\";\nimport Input from \"./components/Input/Input\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const changeHandler = (inputValue) => {\n    const firstLetterToUpper = (string) => {\n      return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n    };\n\n    setInputValue(firstLetterToUpper(inputValue));\n  };\n\n  return (\n    <Box>\n      <Container>\n        <Input inputValue={changeHandler} />\n        <ContactsTable searchValue={inputValue} />\n      </Container>\n    </Box>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}